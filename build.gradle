plugins {
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "java"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "com.github.ben-manes.versions" version "0.27.0"
    id "application"
}

version "0.1"
group "example"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

ext {
    micronautDataVersion = "1.0.0"
    micronautVersion = "1.3.5"
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
    }
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"
    annotationProcessor "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.swagger.core.v3:swagger-annotations"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    compile "io.micronaut:micronaut-management"
    compile "io.micronaut.configuration:micronaut-micrometer-core"

    compile "io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion"
    runtime 'io.micronaut.configuration:micronaut-jdbc-tomcat'
    runtime 'org.postgresql:postgresql:42.2.4'
    implementation "jakarta.persistence:jakarta.persistence-api:2.2.2"
    implementation 'org.flywaydb:flyway-core:6.4.2'
    implementation 'commons-validator:commons-validator:1.6'

    implementation 'io.honeycomb.beeline:beeline-core:1.1.0'

    implementation "io.micronaut:micronaut-tracing"
    runtime 'io.zipkin.brave:brave-instrumentation-http'
    runtime 'io.zipkin.reporter2:zipkin-reporter'
    implementation 'io.opentracing.brave:brave-opentracing'

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testCompile "org.mockito:mockito-junit-jupiter:2.22.0"

    testCompile 'org.assertj:assertj-core:3.11.1'
    testCompile 'io.rest-assured:rest-assured:4.1.2'
    testCompile 'com.squareup.okhttp3:mockwebserver:4.0.1'
    testCompile "org.testcontainers:testcontainers:1.12.3"
    testCompile "org.testcontainers:junit-jupiter:1.12.3"
    testCompile "org.testcontainers:postgresql:1.12.3"
    testImplementation("com.approvaltests:approvaltests:7.0.0")
    implementation 'com.google.code.gson:gson:2.8.6'
}

shadowJar {
    mergeServiceFiles()
}

jar {
    manifest {
        attributes(
                'Main-Class': 'micro.Application'
        )
    }
}

test {
    useJUnitPlatform()
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

mainClassName = "micro.Application"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

task stage(type: Copy, dependsOn: [assemble]) {
    from 'build/libs'
    include '*.jar'
    into project.rootDir
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

clean {
    doLast {
        project.file('app.jar').delete()
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
