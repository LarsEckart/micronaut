plugins {
    id("com.github.johnrengelman.shadow") version "7.0.0"
    id("io.micronaut.application") version "1.5.0"
}

version "0.1"
group "com.larseckart"

repositories {
    mavenCentral()
}

micronaut {
    runtime "netty"
    testRuntime "junit5"
    processing {
        incremental true
        //annotations "com.example.*"
    }
}

dependencies {
    annotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-validation")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    runtimeOnly("ch.qos.logback:logback-classic")

    implementation("jakarta.persistence:jakarta.persistence-api:2.2.2") {
        because 'imports from javax.persistence.*'
    }
    runtimeOnly 'org.postgresql:postgresql:42.2.4'
    implementation 'org.flywaydb:flyway-core:6.4.2'
    implementation 'commons-validator:commons-validator:1.6'

    testAnnotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testAnnotationProcessor("io.micronaut:micronaut-inject-java")
    testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'io.rest-assured:rest-assured:4.1.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.0.1'
    testImplementation "org.testcontainers:testcontainers:1.12.3"
    testImplementation "org.testcontainers:junit-jupiter:1.12.3"
    testImplementation "org.testcontainers:postgresql:1.12.3"
    testImplementation 'net.java.dev.jna:jna:5.7.0'
    testImplementation("com.approvaltests:approvaltests:7.0.0")
    implementation 'com.google.code.gson:gson:2.8.6'
}

test.classpath += configurations.developmentOnly

shadowJar {
    mergeServiceFiles()
}

jar {
    manifest {
        attributes(
                'Main-Class': 'micro.Application'
        )
    }
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    jvmArgs("-XX:+ShowCodeDetailsInExceptionMessages")
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

mainClassName = "micro.Application"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
            '-parameters',
            // enables incremental compilation
            '-Amicronaut.processing.incremental=true',
            '-Amicronaut.processing.annotations=com.example.*',
            "-Amicronaut.processing.group=$project.group",
            "-Amicronaut.processing.module=$project.name",
    ])
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart':'true',
                'micronaut.io.watch.enabled':'true',
                "micronaut.io.watch.paths":"src/main"
        )
    }
}

task stage(type: Copy, dependsOn: [assemble]) {
    from 'build/libs'
    include 'micronaut-*-all.jar'
    into project.rootDir
    rename {
        'micronaut.jar'
    }
}
stage.mustRunAfter(clean)

clean {
    doLast {
        project.file('micronaut.jar').delete()
    }
}
